1. Improve stroking, particularly where Tiller-Hanson breaks down.
2. Consider adding circular/elliptical contours as standalone contours not built out of path segments.
3. Write functions to generate paths out of primitives.
   E.g. makeRoundRect Stuff -> Contour
   Update: This has been started, but we need to add more shapes.
4. Make PathBuilder a Writer monad, so that we can use do notation to write paths, would be *super* elegent 
   to use. Or something. Writer doesn't *quite* work as I need.
5. Create composite objects out of contours and whatnot
6. Refactor the Path/Contour/ClosedPath abstraction. 
   ClosedPath isn't a great abstraction. Also it would be great to provide a more unified interface to 
   Path/Contours. It's nice to have a type level distinction between the concepts, but they also behave very 
   similarly for most things
7. Fix font loading. Either edit FontyFruity to fix loading of certain fonts. Possibly the issue is properly
   checking flags for on/off curve points.
   Or write my own ttf loader. I will probably eventually write a ttf loader, since I will also want an otf
   loader.
8. Improve Rasterization to only rasterize an object within its bounding box. 
9. Improve small scale rasterization (i.e. for fonts at low pixel sizes)
10. Implement more operations on paths and contours, e.g. rotation of contours
11. Add biarcs, biarc fitting to types of paths? They're apparently a *lot* simpler for a lot of things,
    in particular offset curves of biarc curves are biarc curves. Also this would be simple
    after completing 2,3
12. Deal with cusps properly. Probably subdivide, figure out how to get tangents and normals at cusps, and 
    then cap the resulting join (if the tangents are antiparallel ofc). I suppose we could have a sharp point
    that isn't a cusp. (Do math xD)
13. Fix antialiasing. Fixing a bug in antialiasing where overlapping contours didn't render properly
    introduced a new bug where the right side of shapes don't antialias properly.
14. Fix an apparent bug with stroking ellipses (though I don't have a good example,
    but it shows up with (100,50,pi/3) and a strokeWidth of 15)
    (Update: DONE, don't remember what the bug was)
15. Add more types of splines. E.g. NURBS. (Could then unify the other types of curves under nurbs maybe?,
    though perhaps more efficient rn)
    I understand more now. B-splines are basis splines. 
16. Never compare floats for equality. Pretty urgent. This is a huge source of bugs. Just fixed one in the 
    build join function causing massive streaking and glitching.
17. Glitch when stroking sharp interior bends, see Q with a stroke distance of 40.
18. Successfully added Rational Bezier curves. (DONE)
19. Add implicit polynomial (I mean polynomial in x) contours (i.e. the level set of a differentiable 
    function in x and y which is at most a cubic polynomial in x when y is fixed.)
    Then we could solve for x, and also compute the normal to the contour at any given point (since we know the
    gradient). Thus the scan rasterizer could rasterize such a contour. Need to be careful with how we define
    orientation, but I think it could work. This would be a solution to 2 above, as well as being sooooo much
    more general. Could do soooo much cool shit with this. 
20. Related to 19. Add general parametric paths which are polynomial in y. Like fun fact, the scan rasterizer
    doesn't give a shit what x is doing as long as we can solve for y, and take appropriate derivatives.
21. Refactor everything. Like the path abstraction has gotten a bit complicated, since there are so many
    different kinds of paths. Might want to just get rid of non-rational Bezier curves, since they are 
    entirely subsumed by rational Bezier curves
22. Allow rendering of NURBS curves of degree up to 3 by splitting into rational beziers
23. Possibly reimplement circular/elliptical arcs in terms of NURBS given 22/18
    Related to 21.
24. Add NURBS contours, i.e. a NURBS with domain the circle, it has the added benefit that 
    #knots = #control points, regardless of degree or anything, though it admittedly isn't clear how knots and
    control points are directly related in this case. It's just that there are #knots rotations of any
    continguous subset of the control points
25. Add SVG loading/rendering
